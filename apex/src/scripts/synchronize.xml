<project name="synchronize" default="help" basedir="." xmlns:ac="antlib:net.sf.antcontrib">

  <description>
Functionality:
- Generate APEX scripts (target=export)
- Import APEX scripts (target=import)
- Seed and publish (target=seed-publish)

The following properties must be set before:
- application: an Apex application id
- userid: an Oracle userid to connect to the database
- workspace: Apex workspace name
- export.dir: directory to save/retrieve install.sql (will be created when necessary)
- sql.home: the home directory of the SqlCli client (often the SQL Developer home)
- runtime.classpath: the runtime classpath
- ojdbc.java.version: the Java version for JDBC (8, 10, ...)

The following properties are only important during export:
- application.version: an Apex application version
  </description>

  <target name="help">
    <echo message="(synchronize.xml.help) Please run ${ant.file} with -projecthelp" />
  </target>

  <!--taskdef resource="net/sf/antcontrib/antlib.xml"/-->
  
  <target name="init">
    <echo message="(synchronize.xml.init) basedir: ${basedir}" />
    <!-- https://github.com/paulissoft/oracle-tools/issues/224 --> 
    <fail message="Property export.dir (${export.dir}) should be set">
      <condition>
        <not>
          <isset property="export.dir" />
        </not>
      </condition>
    </fail>
    <mkdir dir="${export.dir}" />
    <fail message="Property export.dir (${export.dir}) should be a directory">
      <condition>
        <not>
          <available file="${export.dir}" type="dir" />
        </not>
      </condition>
    </fail>
    <echo message="(synchronize.xml.init) export.dir: ${export.dir}" />
    <dirname property="output.dir" file="${export.dir}" />
    <fail message="Property application should be set and not empty">
      <condition>
        <or>
          <not>
            <isset property="application" />
          </not>
          <equals arg1="${application}" arg2=""/>
        </or>
      </condition>
    </fail>
    <echo message="(synchronize.xml.init) application: ${application}" />
    <fail message="Property userid should be set and not empty">
      <condition>
        <or>
          <not>
            <isset property="userid" />
          </not>
          <equals arg1="${userid}" arg2=""/>
        </or>
      </condition>
    </fail>
    <fail message="Property workspace should be set and not empty">
      <condition>
        <or>
          <not>
            <isset property="workspace" />
          </not>
          <equals arg1="${workspace}" arg2=""/>
        </or>
      </condition>
    </fail>
    <echo message="(synchronize.xml.init) workspace: ${workspace}" />

    <!-- GPA 2017-04-05 We must quote arguments with spaces on Windows. -->
    <condition property="quote" value="&quot;" else="">
      <os family="windows" />
    </condition>
    <property name="lib.dir" location="${basedir}/lib" />

    <!-- sql.home is already set -->
    <condition property="my.sql.home" value="${sql.home}">
      <available file="${sql.home}/bin/sql" type="file" />
    </condition>
    <condition property="my.sql.home" value="${env.SQL_HOME}">
      <available file="${env.SQL_HOME}/bin/sql" type="file" />
    </condition>

    <!--
        For APEX export try (in this order):
        1. oradumper (with oracle_tools.ui_apex_export)
        2. SQLcl (with oracle_tools.ui_apex_export)
        3. SQLcl apex export ...
        4. Java
    -->
    <condition property="oradumper.executable" value="/usr/local/bin/oradumper" >
      <available file="/usr/local/bin/oradumper" type="file" />
    </condition>
    <condition property="export.oradumper" value="true" >
      <isset property="oradumper.executable" />
    </condition>
    <echo message="(synchronize.xml.init) export.oradumper: ${export.oradumper}" />

    <condition property="export.sqlcl.plsql" value="true">
      <and>
        <isset property="my.sql.home" />
        <not>
          <isset property="export.oradumper" />
        </not>
      </and>
    </condition>
    <echo message="(synchronize.xml.init) export.sqlcl.plsql: ${export.sqlcl.plsql}" />

    <condition property="export.sqlcl.apex" value="true">
      <and>
        <isset property="my.sql.home" />
        <not>
          <or>
            <isset property="export.oradumper" />
            <isset property="export.sqlcl.plsql" />
          </or>
        </not>
      </and>
    </condition>
    <echo message="(synchronize.xml.init) export.sqlcl.apex: ${export.sqlcl.apex}" />

    <condition property="export.java" value="true">
      <not>
        <or>
          <isset property="export.oradumper" />
          <isset property="export.sqlcl.plsql" />
          <isset property="export.sqlcl.apex" />
        </or>
      </not>
    </condition>
    <echo message="(synchronize.xml.init) export.java: ${export.java}" />

    <condition property="sql.executable" value="${my.sql.home}/bin/sql.exe" else="${my.sql.home}/bin/sql">
      <os family="windows"/>
    </condition>
    <!--property name="sql.executable" location="${my.sql.executable}" /-->
    <echo message="(synchronize.xml.init) $${sql.home}: ${sql.home}" />
    <echo message="(synchronize.xml.init) $${env.SQL_HOME}: ${env.SQL_HOME}" />
    <echo message="(synchronize.xml.init) $${my.sql.home}: ${my.sql.home}" />
    <echo message="(synchronize.xml.init) $${sql.executable}: ${sql.executable}" />

    <property name="runtime.classpath" refid="runtime.classpath" />

    <echo message="(synchronize.xml.init) $${runtime.classpath}: ${runtime.classpath}" />

    <!-- There are environments where you can not launch SQLcl from the command line but only thru Java (Citrix for example). -->
    <property name="launch-sqlcl-java" value="false" />
    <property name="ojdbc.java.version" value="8" />

    <echo message="(synchronize.xml.init) $${launch-sqlcl-java}: ${launch-sqlcl-java}" />
    <echo message="(synchronize.xml.init) $${ojdbc.java.version}: ${ojdbc.java.version}" />
  </target>

  <target name="init-split-userid">
    <echo message="(synchronize.xml.init-split-userid)" />
    <property name="userid.pattern" value="^([^/]+)/(.+)@([^@]+)$"/>
    <!--
      <script language="javascript">
        arr = project.getProperty('userid').split('[/@]');
        project.setProperty('my.user', arr[0]);
        project.setProperty('my.password', arr[1]);
        project.setProperty('my.db', arr[2]);
      </script>
    -->
    <loadresource property="my.user">
      <string value="${userid}"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="${userid.pattern}" replace="\1"/>
        </tokenfilter>
      </filterchain>
    </loadresource>
    <loadresource property="my.password">
      <string value="${userid}"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="${userid.pattern}" replace="\2"/>
        </tokenfilter>
      </filterchain>
    </loadresource>
    <loadresource property="my.db">
      <string value="${userid}"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="${userid.pattern}" replace="\3"/>
        </tokenfilter>
      </filterchain>
    </loadresource>
    <property name="my.userid" value="${my.user}@${my.db}"/>
    <echo message="(synchronize.xml.init-split-userid) $${my.user}     => ${my.user}"/>
    <echo message="(synchronize.xml.init-split-userid) $${my.db}       => ${my.db}"/>
    <echo message="(synchronize.xml.init-split-userid) $${my.userid}   => ${my.userid}"/>
  </target>

  <!-- IMPORT -->
  
  <!-- prefer non flat structure -->
  <target name="init-import">
    <echo message="(synchronize.xml.init-import)" />
    <condition property="input.file"
               value="install.sql"
               else="f${application}.sql">
      <available file="${export.dir}/install.sql" type="file" />
    </condition>    
    <condition property="input.file.dir"
               value="${export.dir}"
               else="${output.dir}">
      <available file="${export.dir}/install.sql" type="file" />
    </condition>    
    <echo message="(synchronize.xml.init-import) Importing from ${input.file.dir}/${input.file}" />
  </target>

  <macrodef name="sqlplus" description="Run SQL*Plus">
    <attribute name="name"/> <!-- unique name -->
    <attribute name="dir"/>
    <attribute name="sqlfile"/>
    <attribute name="sqlarg1" default=""/>
    <attribute name="sqlarg2" default=""/>
    <attribute name="sqlarg3" default=""/>
    <sequential>
      <tempfile property="@{name}.file" deleteonexit="true" />
      <ac:trycatch property="@{name}.error">
        <try>
          <!-- record the output so we can check for ORA-01017 -->
          <record name="${@{name}.file}" action="start"/>
          <exec executable="sqlplus"
                failonerror="true"
                spawn="false"
                dir="@{dir}"
                inputstring="${my.password}">
            <arg value="-S" /> <!-- silent -->
            <arg value="${quote}${my.userid}${quote}" />
            <arg value="@{sqlfile}" />
            <arg value="@{sqlarg1}" />
            <arg value="@{sqlarg2}" />
            <arg value="@{sqlarg3}" />
            <!-- Oracle clients love NLS_LANG -->
            <env key="NLS_LANG" value="American_America.UTF8"/>
          </exec>
          <record name="${@{name}.file}" action="stop"/>
          <fail>
            <condition>
              <!-- This does not raise an error in SQL*Plus: we just do it ourselves -->
              <!-- ORA-01017: invalid username/password; logon denied -->
              <resourcecontains resource="${@{name}.file}" substring="ORA-01017:" />
            </condition>
          </fail>
        </try>
        <catch>
          <!-- Show version -->
          <exec executable="sqlplus"
                failonerror="false"
                spawn="false">
            <arg value="-V" /> <!-- show version -->
            <!-- Oracle clients love NLS_LANG -->
            <env key="NLS_LANG" value="American_America.UTF8"/>
          </exec>
          <!-- Fail anyhow -->
          <fail message="${@{name}.error}"/>
        </catch>
      </ac:trycatch>
    </sequential>
  </macrodef>
  
  <target name="import-sqlplus"
          depends="init-import"
          unless="my.sql.home">
    <echo message="(synchronize.xml.import-sqlplus) Import is using SQL*Plus"
          />
    <sqlplus name="import"
             dir="${input.file.dir}"
             sqlfile='@${basedir}/import.sql'
             sqlarg1='"${workspace}"'
             sqlarg2='"${application}"'
             sqlarg3='"${input.file}"'/>
  </target>

  <macrodef name="sqlcl" description="Run Java Sql Client">
    <attribute name="name"/> <!-- unique name -->
    <attribute name="dir"/>
    <attribute name="sqlfile"/>
    <attribute name="sqlarg1" default=""/>
    <attribute name="sqlarg2" default=""/>
    <attribute name="sqlarg3" default=""/>
    <sequential>
      <echo message="&gt;sqlcl"/>
      <ac:trycatch property="@{name}.error">
        <try>
          <ac:if>
            <!-- GJP 2022-12-21 https://github.com/paulissoft/oracle-tools/issues/101
                 failonerror="false" => failonerror="true"
            -->
            <!-- There are environments where you can not launch SQLcl from the command line but only thru Java (Citrix for example). -->
            <istrue value="${launch-sqlcl-java}"/>
            <then>
              <java classname="oracle.dbtools.raptor.scriptrunner.cmdline.SqlCli"
                    fork="true"
                    spawn="false"
                    dir="@{dir}"
                    inputstring="${my.password}"
                    failonerror="true">
                <sysproperty key="java.awt.headless" value="true"/>
                <sysproperty key="apple.awt.UIElement" value="true"/>
                <jvmarg value="-Xss10M"/>
                <classpath id="sqlcl.classpath">
                  <!-- from file ${my.sql.home}/bin/sql -->

                  <pathelement location="${my.sql.home}/lib/dbtools-sqlcl.jar"/>
                  
                  <!-- please note that in the script they are built up in a reversed -->
                  
                  <fileset dir="${my.sql.home}/lib">
                    <include name="jansi.jar"/>
                    <include name="drivers/*"/>
                    <include name="ext/*"/>
                    <include name="javax.json.jar"/>
                    <include name="javax.json-api.jar"/>
                    <include name="xmlparserv2.jar"/>
                    <include name="commons-logging.jar"/>
                    <include name="orai18n.jar"/>
                    <include name="xmlparserv2-sans-jaxp-services.jar"/>
                    <include name="orai18n-collation.jar"/>
                    <include name="jackson-databind.jar"/>
                    <include name="xdb6.jar"/>
                    <include name="jackson-core.jar"/>
                    <include name="stringtemplate.jar"/>
                    <include name="oraclepki.jar"/>
                    <include name="jackson-annotations.jar"/>
                    <include name="osdt_core.jar"/>
                    <include name="httpmime.jar"/>
                    <include name="osdt_cert.jar"/>
                    <include name="httpcore.jar"/>
                    <include name="orajsoda.jar"/>
                    <include name="httpclient.jar"/>
                    <include name="orai1${ojdbc.java.version}n-utility.jar"/>
                    <include name="ojdbc${ojdbc.java.version}.jar"/>
                    <include name="dbtools-net.jar"/>
                    <include name="dbtools-http.jar"/>
                    <include name="dbtools-common.jar"/>
                    <include name="orai1${ojdbc.java.version}n-servlet.jar"/>
                    <include name="jsch.jar"/>
                    <include name="commons-codec.jar"/>
                    <include name="jdbcrest.jar"/>
                    <include name="orai1${ojdbc.java.version}n-mapping.jar"/>
                    <include name="jline.jar"/>
                    <include name="antlr-runtime.jar"/>
                    <!--include name="jansi.jar"/-->
                    <!-- version 20 on Mac OS X -->
                    <include name="dbtools-data.jar"/>
                    <include name="guava.jar"/>
                    <!-- version 21 on Mac OS X -->
                    <include name="jline3.jar"/>
                    <include name="dbtools-datapump.jar"/>
                    <include name="xmlparserv2_sans_jaxp_services.jar"/>
                    <include name="httpcore5.jar"/>
                    <include name="jackson-jr-stree.jar"/>
                    <include name="guava-with-lf.jar"/>
                    <include name="xdb.jar"/>
                  </fileset>
                  
                  <!-- Start of #Sql file locations (when embedded) -->
                  <fileset dir="${my.sql.home}/..">
                    <include name="rdbms/jlib/xdb6.jar"/>
                    <include name="jdbc/lib/ojdbc${ojdbc.java.version}.jar"/>
                    <include name="jlib/orai1${ojdbc.java.version}n-utility.jar"/>
                    <include name="jlib/orai1${ojdbc.java.version}n-mapping.jar"/>
                    <include name="jlib/orai1${ojdbc.java.version}n.jar"/>
                    <include name="modules/oracle.xdk/xmlparserv2.jar"/>
                  </fileset>

                  <!-- For Dataxion -->
                  <fileset dir="${my.sql.home}">
                    <include name="rdbms/jlib/xdb6.jar"/>
                    <include name="jdbc/lib/ojdbc${ojdbc.java.version}.jar"/>
                    <include name="jlib/orai1${ojdbc.java.version}n-utility.jar"/>
                    <include name="jlib/orai1${ojdbc.java.version}n-mapping.jar"/>
                    <include name="jlib/orai1${ojdbc.java.version}n.jar"/>
                    <include name="modules/oracle.xdk/xmlparserv2.jar"/>
                  </fileset>
                  <!-- End of #Sql file locations (when embedded) -->          
                </classpath>
                <!-- for Unix -->
                <env key="LD_LIBRARY_PATH"
                     value="${my.sql.home}/lib:${my.sql.home}:${env.LD_LIBRARY_PATH}"/>
                <!-- finally the arguments for the class -->
                <arg value="-S" /> <!-- silent -->
                <arg value="${quote}${my.userid}${quote}" />
                <arg value="@{sqlfile}" />
                <arg value="@{sqlarg1}" />
                <arg value="@{sqlarg2}" />
                <arg value="@{sqlarg3}" />
              </java>
            </then>
            <else>
              <!-- empty sqlarg3 gives a string index -1 error -->
              <ac:if>
                <equals arg1="@{sqlarg3}" arg2=""/>
                <then>
                  <exec executable="${sql.executable}"
                        dir="@{dir}"
                        inputstring="${my.password}"
                        failonerror="true">
                    <arg value="-S" /> <!-- silent -->
                    <arg value="${quote}${my.userid}${quote}" />
                    <arg value="@{sqlfile}" />
                    <arg value="@{sqlarg1}" />
                    <arg value="@{sqlarg2}" />
                    <!-- Oracle clients love NLS_LANG -->
                    <env key="NLS_LANG" value="American_America.UTF8"/>
                  </exec>
                </then>
                <else>
                  <exec executable="${sql.executable}"
                        dir="@{dir}"
                        inputstring="${my.password}"
                        failonerror="true">
                    <arg value="-S" /> <!-- silent -->
                    <arg value="${quote}${my.userid}${quote}" />
                    <arg value="@{sqlfile}" />
                    <arg value="@{sqlarg1}" />
                    <arg value="@{sqlarg2}" />
                    <arg value="@{sqlarg3}" />
                    <!-- Oracle clients love NLS_LANG -->
                    <env key="NLS_LANG" value="American_America.UTF8"/>
                  </exec>
                </else>
              </ac:if>
            </else>
          </ac:if>        
        </try>
        <catch>
          <ac:if>
            <istrue value="${launch-sqlcl-java}"/>
            <then>
              <!-- show classpath -->
              <pathconvert property="sqlcl.classpath.property"
                           refid="sqlcl.classpath"/>
              <ac:var name="index" value="1"/>
              <ac:for list="${sqlcl.classpath.property}"
                      delimiter="${path.separator}"
                      param="file">
                <sequential>
                  <echo message="(synchronize.xml.sqlcl) classpath #${index}: @{file}"/>
                  <ac:math result="index"
                           operand1="${index}"
                           operation="+"
                           operand2="1"
                           datatype="int"/>
                </sequential>
              </ac:for>
              <!-- show version of sqlcl -->
              <java classname="oracle.dbtools.raptor.scriptrunner.cmdline.SqlCli"
                    fork="true"
                    spawn="false"
                    failonerror="false">
                <sysproperty key="java.awt.headless" value="true"/>
                <sysproperty key="apple.awt.UIElement" value="true"/>
                <jvmarg value="-Xss10M"/>
                <classpath refid="sqlcl.classpath" />
                <!-- for Unix -->
                <env key="LD_LIBRARY_PATH"
                     value="${my.sql.home}/lib:${my.sql.home}:${env.LD_LIBRARY_PATH}"/>
                <!-- finally the arguments for the class -->
                <arg value="-V" /> <!-- show version -->
              </java>
            </then>
          </ac:if>        
          <!-- fail anyhow -->
          <fail message="${@{name}.error}"/>
        </catch>
      </ac:trycatch>
      <echo message="&lt;sqlcl"/>
    </sequential>
  </macrodef>

  <target name="import-sqlcl"
          depends="init-import"
          if="my.sql.home">
    <echo message="(synchronize.xml.import-sqlcl) Import is using Java SqlCli" />
    <sqlcl name="import"
           dir="${input.file.dir}"
           sqlfile='@${basedir}/import.sql'
           sqlarg1='"${workspace}"'
           sqlarg2='"${application}"'
           sqlarg3='"${input.file}"'/>
  </target>

  <target name="import"
          depends="init,init-split-userid,import-sqlplus,import-sqlcl"
          description="import">
    <echo message="(synchronize.xml.import)" />
  </target>

  <!-- EXPORT -->
  
  <target name="init-export" depends="init,init-split-userid">
    <property name="output.file" value="f${application}.sql" />
    <basename property="output.file.base" file="${output.file}" suffix=".sql" />
    <!-- delete temporary files / directories -->
    <delete file="${output.dir}/${output.file}" quiet="true" />
    <delete dir="${output.dir}/${output.file.base}" quiet="true" />
  </target>
  
  <!-- export solution with Java SqlCli class -->
  <target name="export-oradumper"
          depends="init-export"
          if="export.oradumper">
    <echo message="(synchronize.xml.export-oradumper) Writing Apex export of application ${application}" />

    <tempfile property="oradumper.file" deleteonexit="true" />
    <ac:trycatch property="oradumper.error">
      <try>
        <!-- record the output so we can check for ORA- errors -->
        <record name="${oradumper.file}" action="start"/>
        <exec executable="bash"
              failonerror="false"
              resultproperty="oradumper.result"
              spawn="false"
              dir="${output.dir}">
          <arg value="-c"/>
          <arg value="${basedir}/export_oradumper.sh ${oradumper.executable} ${workspace} ${application}"/>
          <!-- Oracle clients love NLS_LANG -->
          <env key="NLS_LANG" value="American_America.UTF8"/>
          <env key="USERID" value="${userid}"/>
        </exec>
        <record name="${oradumper.file}" action="stop"/>
        <fail>
          <condition>
            <or>
              <resourcecontains resource="${oradumper.file}" substring="ORA-" />
              <not>
                <equals arg1="${oradumper.result}" arg2="0" />
              </not>
            </or>
          </condition>
        </fail>
      </try>
      <catch>
        <!-- Fail anyhow -->
        <echo message="return code: ${oradumper.result}" />
        <fail message="${oradumper.error}"/>
      </catch>
      </ac:trycatch>
  </target>

  <!-- export solution with Java SqlCli class -->
  <target name="export-sqlcl"
          depends="init-export"
          if="export.sqlcl.apex">
    <echo message="(synchronize.xml.export-sqlcl) Writing Apex export of application ${application}" />
    <!-- Following command may create ${output.file} or not depending on SQL version -->
    <sqlcl name="export"
           dir="${output.dir}"
           sqlfile='@${basedir}/export.sql'
           sqlarg1='"${workspace}"'
           sqlarg2='"${application}"'/>
  </target>

  <target name="export-plsql"
          depends="init-export"
          if="export.sqlcl.plsql">
    <echo message="(synchronize.xml.export-plsql) Writing Apex export of application ${application}" />
    <exec executable="bash"
          failonerror="true"
          spawn="false"
          dir="${output.dir}">
      <arg value="-c"/>
      <arg value="${basedir}/export_plsql.sh ${sql.executable} ${workspace} ${application}"/>
      <!-- Oracle clients love NLS_LANG -->
      <env key="NLS_LANG" value="American_America.UTF8"/>
      <env key="USERID" value="${userid}"/>
    </exec>
  </target>

  <!-- export solution with oracle.apex.APEXExport class -->
  <target name="export-java"
          depends="init-export,init-split-userid"
          if="export.java">
    <echo message="(synchronize.xml.export-java)" />

    <!-- first run pre_export.sql to apply seed translations and publish the
         application -->
    <sqlplus name="pre_import"
             dir=""
             sqlfile='@${basedir}/pre_export.sql'
             sqlarg1='"${workspace}"'
             sqlarg2='"${application}"'/>

    <echo message="(synchronize.xml.export-java) Writing Apex export of application ${application}" />
    <java classname="oracle.apex.APEXExport" fork="true" dir="${output.dir}">
      <arg value="-db"/>
      <arg value="${my.db}"/>
      <arg value="-user"/>
      <arg value="${my.user}"/>
      <arg value="-password"/>
      <arg value="${my.password}"/>
      <arg value="-applicationid"/>
      <arg value="${application}"/>
      <arg value="-expPubReports"/>
      <arg value="-expSavedReports"/>
      <arg value="-expTranslations"/>
      <arg value="-expOriginalIds"/>
      <arg value="-split"/>
      <classpath>
        <pathelement refid="runtime.classpath"/>
        <pathelement path="${lib.dir}"/>
      </classpath>
    </java>
  </target>

  <target name="export"
          depends="init,init-split-userid,export-oradumper,export-sqlcl,export-plsql,export-java"
          description="export">
    <echo message="(synchronize.xml.export)" />
    <fail message="Error creating temporary export directory (directory ${output.dir}/${output.file.base} does not exist)">
      <condition>
        <not>
          <available file="${output.dir}/${output.file.base}" type="dir" />
        </not>
      </condition>
    </fail>
    <delete dir="${export.dir}" quiet="true"/>
    <move file="${output.dir}/${output.file.base}" tofile="${export.dir}" />
    <delete file="${output.dir}/${output.file}" quiet="true" />
    <replaceregexp file="${export.dir}/application/create_application.sql"
                   match=",p_flow_version=>'.*'"
                   replace=",p_flow_version=>'Version ${application.version}'"
                   byline="true"/>
  </target>

  <target name="seed-publish"
          depends="init,init-split-userid,seed-publish-sqlplus,seed-publish-sqlcl"
          description="Seed and publish">
    <echo message="(synchronize.xml.seed-publish)" />
  </target>

  <!-- seed and publish with SQL*Plus -->
  <target name="seed-publish-sqlplus"
          unless="my.sql.home">
    <sqlplus name="seed-publish"
             dir=""
             sqlfile='@${basedir}/pre_export.sql'
             sqlarg1='"${workspace}"'
             sqlarg2='"${application}"'/>
  </target>

  <!-- seed and publish with Java SqlCli class -->
  <target name="seed-publish-sqlcl"
          if="my.sql.home">
    <sqlcl name="seed-publish"
           dir=""
           sqlfile='@${basedir}/pre_export.sql'
           sqlarg1='"${workspace}"'
           sqlarg2='"${application}"'/>
  </target>

</project>
