<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.paulissoft.pato</groupId>
    <artifactId>conf</artifactId>
    <version>${revision}</version>
    <relativePath>../conf/pom.xml</relativePath>
  </parent>
  <groupId>com.paulissoft.pato</groupId>
  <artifactId>db</artifactId>
  <packaging>pom</packaging>
  <description>Core POM for Database builds</description>

  <properties>
    <oracle-tools.db.src.dir>${oracle-tools.dir}/db/src</oracle-tools.db.src.dir>
    <oracle-tools.db.schema>${oracle_tools_schema}</oracle-tools.db.schema>
    <!--
    # The msg subsystem is meant to be installed in an application schema where you want to derive from MSG_TYP.
    # Since deriving from a super type works only well in one schema,
    # you may want to override the schema where you want to install the msg subsystem.
    -->
    <oracle-tools.db.schema.msg>${oracle_tools_schema_msg}</oracle-tools.db.schema.msg>

    <!-- =========================================== -->
    <!-- Database properties for Flyway (db-install) -->
    <!-- =========================================== -->
    <db.src.scripts>src</db.src.scripts>
    <db.src.dml.scripts>${db.src.scripts}/dml</db.src.dml.scripts>
    <db.src.full.scripts>${db.src.scripts}/full</db.src.full.scripts>
    <db.src.incr.scripts>${db.src.scripts}/incr</db.src.incr.scripts>
    <db.src.upgr.scripts>${db.src.scripts}/upgr</db.src.upgr.scripts>
    <!-- callbacks are added to the artifact for deployment later on without
         CD sources -->
    <db.src.callbacks.scripts>${oracle-tools.db.src.dir}/callbacks</db.src.callbacks.scripts>

    <!-- compile all and reuse settings for afterMigrate.sql -->
    <flyway.placeholders.compile_all>false</flyway.placeholders.compile_all>
    <flyway.placeholders.reuse_settings>false</flyway.placeholders.reuse_settings>
    <!-- flyway-maven-plugin configuration -->
    <flyway.outOfOrder>false</flyway.outOfOrder>
    <flyway.table>flyway_schema_history</flyway.table>
    <flyway.baselineVersion>0</flyway.baselineVersion>
    <flyway.baselineOnMigrate>true</flyway.baselineOnMigrate>
    <!-- should not start with flyway. -->
    <nr_months_to_keep.flyway.table>12</nr_months_to_keep.flyway.table>

    <!-- =============================================================================== -->
    <!-- Properties for generate flyway migrations SQL (part of profile db-install)      -->
    <!-- =============================================================================== -->
    <!-- Do you want to generate a Flyway migrations SQL script?                         -->
    <!-- Set db.install.generate.flyway.migrations.sql to true (see profile db-install). -->
    <generate.flyway.migrations.sql>false</generate.flyway.migrations.sql>
    <classpath.file>${project.build.directory}/classpath.txt</classpath.file>

    <!-- ======================================================================= -->
    <!-- Properties for generate DDL (db-generate-ddl-full/db-generate-ddl-incr) -->
    <!-- ======================================================================= -->
    <!-- object type as defined in documentation of Oracle package DBMS_METADATA -->
    <db.object.type />
    <!-- A list of object names to include or exclude (or empty to include all) -->
    <db.object.names />
    <!-- db.object.names.include specifies what to do with db.object.names: empty (no filter), 0 (exclude) or 1 (include) -->
    <db.object.names.include />
    <!-- A list of object IDs to exclude (empty means exclude none) -->
    <db.exclude.objects />
    <!-- A list of object IDs to include (empty means include all) -->
    <db.include.objects />
    <!-- must set it here so profile oracle-tools can override it when
         db-generate-ddl-full is also active -->
    <db.generate.ddl.full.skip>true</db.generate.ddl.full.skip>
    <db.generate.ddl.incr.skip>true</db.generate.ddl.incr.skip>
    
    <!-- ============================ -->
    <!-- UTPLSQL properties (db-test) -->
    <!-- ============================ -->
    <db.utplsql.path>${db.schema}:${project.artifactId}</db.utplsql.path>
    <db.test.phase>none</db.test.phase>

    <!-- ======================== -->
    <!-- Maven lifecycle phases   -->
    <!--                          -->
    <!-- See also ../conf/pom.xml -->
    <!-- ======================== -->    
    <db.phase.init>validate</db.phase.init>
    <db.phase.process>compile</db.phase.process>
    <db.show.properties>false</db.show.properties>
  </properties>

  <!-- Needed for Db Generate DDL scripts in child projects -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.paulissoft.pato</groupId>
        <artifactId>db</artifactId>
        <version>${oracle-tools.db.version}</version>
        <classifier>src</classifier>
        <type>zip</type>
        <!-- Make sure this isn't included on any classpath-->
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <resources />
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${maven-antrun-plugin.version}</version>
          <executions>
            <execution>
              <id>db-init</id>
              <phase>${db.phase.init}</phase>
              <configuration>
                <exportAntProperties>true</exportAntProperties>
                <target>
                  <condition property="conf.connect.skip" value="true" else="false">
                    <not>
                      <available file="${db.src.full.scripts}" type="dir" />
                    </not>
                  </condition>
                  <property name="db.install.skip" value="${conf.connect.skip}" />                  
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <id>db-debug-before</id>
              <phase>${db.phase.init}</phase>
              <configuration>
                <target if="${db.show.properties}">
                  <echoproperties prefix="flyway." />
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <!-- This must be named -->
              <id>db-install-init</id>
              <!-- give the generate-resources phase a chance to extract resources -->
              <phase>${db.phase.process}</phase>
              <configuration>
                <exportAntProperties>true</exportAntProperties>
                <target unless="${db.install.skip}">
                  <!-- (1) READ THE flyway-db.conf FILE. -->
                  
                  <!-- If the file is not there: no problem according to the Ant documentation. -->
                  <dirname file="${db.properties.abs}"
                           property="db.properties.dir" />
                  <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                    <available file="${db.properties.dir}${file.separator}flyway-db.conf" type="file" />
                    <then>
                      <echo level="${ant.log.level}">Reading flyway-db properties from file ${db.properties.dir}${file.separator}flyway-db.conf</echo>
                      <!-- no prefix needed -->
                      <property file="${db.properties.dir}${file.separator}flyway-db.conf" />
                    </then>
                    <else>
                      <echo level="${ant.log.level}">Could NOT read flyway-db properties since file flyway-db.conf has NOT been found in ${db.properties.dir}</echo>
                    </else>
                  </ac:if>

                  <!-- (2) READ THE flyway-app.conf FILE. -->
                  
                  <!-- If the file is not there: no problem according to the Ant documentation. -->
                  <dirname file="${env.properties.abs}"
                           property="env.properties.dir" />
                  <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                    <available file="${env.properties.dir}${file.separator}flyway-app.conf" type="file" />
                    <then>
                      <echo level="${ant.log.level}">Reading flyway-app properties from file ${env.properties.dir}${file.separator}flyway-app.conf</echo>
                      <!-- no prefix needed -->
                      <property file="${env.properties.dir}${file.separator}flyway-app.conf" />
                    </then>
                    <else>
                      <echo level="${ant.log.level}">Could NOT read flyway-app properties since file flyway-app.conf has NOT been found in ${env.properties.dir}</echo>
                    </else>
                  </ac:if>
                  
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <!-- This must be named -->
              <id>db-install-verify</id>
              <!-- give the generate-resources phase a chance to extract resources -->
              <phase>${db.phase.process}</phase>
              <configuration>
                <exportAntProperties>true</exportAntProperties>
                <target unless="${db.install.skip}">
                  <property name="db.src.dml.scripts.abs" location="${db.src.dml.scripts}" />
                  <fail message="Directory ${db.src.dml.scripts.abs} does not exist">
                    <condition>
                      <not>
                        <available file="${db.src.dml.scripts.abs}" type="dir"/>
                      </not>
                    </condition>
                  </fail>
                  
                  <property name="db.src.full.scripts.abs" location="${db.src.full.scripts}" />
                  <fail message="Directory ${db.src.full.scripts.abs} does not exist">
                    <condition>
                      <not>
                        <available file="${db.src.full.scripts.abs}" type="dir"/>
                      </not>
                    </condition>
                  </fail>
                  
                  <property name="db.src.incr.scripts.abs" location="${db.src.incr.scripts}" />
                  <fail message="Directory ${db.src.incr.scripts.abs} does not exist">
                    <condition>
                      <not>
                        <available file="${db.src.incr.scripts.abs}" type="dir"/>
                      </not>
                    </condition>
                  </fail>
                  
                  <property name="db.src.callbacks.scripts.abs" location="${db.src.callbacks.scripts}" />
                  <fail message="Directory ${db.src.callbacks.scripts.abs} does not exist">
                    <condition>
                      <not>
                        <available file="${db.src.callbacks.scripts.abs}" type="dir"/>
                      </not>
                    </condition>
                  </fail>

                  <!-- filesystem: seems to be a problem for filterchain -->
                  <property name="tmp.flyway.locations"
                            value="filesystem:${db.src.full.scripts.abs},filesystem:${db.src.incr.scripts.abs},filesystem:${db.src.dml.scripts.abs},filesystem:${db.src.callbacks.scripts.abs}," />

                  <!-- to suppress WARNING: Discarding duplicate location -->
                  
                  <!-- https://stackoverflow.com/questions/21179080/removing-dupliates-from-comma-seperate-strings-stored-in-ant-property -->

                  <loadresource property="flyway.locations">
                    <propertyresource name="tmp.flyway.locations" />
                    <filterchain>
                      <tokenfilter>
                        <filetokenizer />
                        <replacestring from="," to="${line.separator}" />
                      </tokenfilter>                      
                      <sortfilter />
                      <uniqfilter />
                      <tokenfilter>
                        <filetokenizer />
                        <replacestring from="${line.separator}" to="," />
                        <replaceregex pattern="^,|,$" replace="" />
                      </tokenfilter>
                    </filterchain>
                  </loadresource>
        
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <id>db-debug-after</id>
              <phase>${db.phase.process}</phase>
              <configuration>
                <target if="${db.show.properties}">
                  <echoproperties prefix="flyway." />
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <id>db-install-before</id>
              <phase>${db.phase.process}</phase>
              <configuration>
                <target if="${generate.flyway.migrations.sql}">
                  <property name="mode.normal" value="true" /> <!-- false for more debugging -->
                  <tempfile property="flyway.properties"
                            destdir="${project.build.directory}"
                            prefix="flyway"
                            suffix=".properties"
                            deleteonexit="${mode.normal}" />
                  <property name="flyway.info.json" location="${project.build.directory}/flyway-info.json" />
                  <!-- cleanup old stuff -->
                  <delete file="${flyway.info.json}" quiet="true" />
                  <property name="flyway.driver" value="oracle.jdbc.OracleDriver" />
                  <property name="flyway.user" value="${db.username}" />
                  <property name="flyway.password" value="${db.password}" />
                  <property name="flyway.url" value="${db.url}" />
                  <echoproperties destfile="${flyway.properties}">
                    <propertyset>
                      <propertyref prefix="flyway.placeholders." />
                      <propertyref prefix="flyway.driver" />
                      <propertyref prefix="flyway.outOfOrder" />
                      <propertyref prefix="flyway.table" />
                      <propertyref prefix="flyway.baselineVersion" />
                      <propertyref prefix="flyway.baselineOnMigrate" />
                    </propertyset>
                  </echoproperties>

                  <!-- replace new lines in ${flyway.locations} so it becomes a one liner -->
                  <ac:propertyregex xmlns:ac="antlib:net.sf.antcontrib"
                                    property="flyway.locations.one.line"
                                    override="true"
                                    input="${flyway.locations}"
                                    regexp="[\n\r]+"
                                    replace=""
                                    casesensitive="false"
                                    global="true" />

                  <!-- append output properties that may have a colon (:) since echoproperties transforms that into \: -->
                  <echo level="error" file="${flyway.properties}" append="true">
flyway.user=${flyway.user}
flyway.password=${flyway.password}
flyway.locations=${flyway.locations.one.line}
flyway.url=${flyway.url}
                  </echo>
                  <property name="flyway.script" location="${oracle-tools.dir}/db/src/scripts/flyway.pl" />
                  <loadfile property="classpath" srcFile="${classpath.file}"/>
                  <exec executable="perl"
                        dir="${project.build.directory}"
                        spawn="false"
                        failonerror="true"
                        discardOutput="${mode.normal}">
                    <arg value="${flyway.script}"/>
                    <!-- hereafter flyway command line arguments -->
                    <arg value="-configFiles=${flyway.properties}"/>
                    <arg value="-outputType=json"/>
                    <arg value="-outputFile=${flyway.info.json}"/>
                    <arg value="-infoOfState=Pending"/>
                    <arg value="info"/>
                    <env key="LANG" value="en_US" />
                    <env key="CLASSPATH" value="${classpath}" />
                  </exec>
                  <mkdir dir="${project.basedir}/${db.src.upgr.scripts}" />
                  <move todir="${project.basedir}/${db.src.upgr.scripts}">
                    <fileset dir="${project.build.directory}">
                      <include name="flyway-migrations-*.sql"/>
                    </fileset>
                  </move>
                  <echo message="Flyway migrations SQL script generated in folder ${project.basedir}/${db.src.upgr.scripts}" />
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Flyway -->
        <plugin>
          <groupId>org.flywaydb</groupId>
          <artifactId>flyway-maven-plugin</artifactId>
          <version>${flyway.version}</version>
          <dependencies>
            <dependency>
              <groupId>org.flywaydb</groupId>
              <artifactId>flyway-database-oracle</artifactId>
              <version>${flyway.version}</version>
            </dependency>
          </dependencies>
          <configuration>
            <skip>${db.install.skip}</skip>
            <!-- The section below will not used since the Maven property ${flyway.locations} (set above) has a higher precedence. -->
            <!--
            <locations>                
              <location>filesystem:${db.src.full.scripts.abs}</location>
              <location>filesystem:${db.src.incr.scripts.abs}</location>
              <location>filesystem:${db.src.dml.scripts.abs}</location>
              <location>filesystem:${db.src.callbacks.scripts.abs}</location>
            </locations>
            -->
            <baselineVersion>${flyway.baselineVersion}</baselineVersion>
            <baselineOnMigrate>${flyway.baselineOnMigrate}</baselineOnMigrate>
            <cleanDisabled>true</cleanDisabled> <!-- GJP 2025-09-16 Keep this hard-coded. -->
            <user>${db.username}</user>
            <!-- The password may be set on the command line -->
            <password>${db.password}</password>
            <url>${db.url}</url>
            <outOfOrder>${flyway.outOfOrder}</outOfOrder>
          </configuration>
          <executions>
            <execution>
              <!-- This must be named -->
              <id>db-install</id>
              <!-- give the generate-resources phase a chance to extract resources -->
              <phase>${db.phase.process}</phase>
            </execution>
          </executions>
        </plugin>

        <!-- utplsql v3 -->
        <plugin>
          <groupId>org.utplsql</groupId>
          <artifactId>utplsql-maven-plugin</artifactId>
          <version>${utplsql-maven-plugin.version}</version>
          <configuration>
            <!-- this plugin has no skip tag -->
            <paths>
              <path>${db.utplsql.path}</path>
            </paths>
            <dbmsOutput>true</dbmsOutput>
          </configuration>
          <executions>
            <execution>
              <!-- This must be named -->
              <id>db-test</id>
              <phase>${db.test.phase}</phase>
              <goals>
                <goal>test</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- sql maven plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>sql-maven-plugin</artifactId>
          <configuration>
            <forceMojoExecution>true</forceMojoExecution>
            <driver>oracle.jdbc.OracleDriver</driver>
            <url>${db.url}</url>
            <username>${db.username}</username>
            <password>${db.password}</password>
            <skip>${db.install.skip}</skip>
            <skipOnConnectionError>true</skipOnConnectionError>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- Configuration won't be propagated to children --> 
      <!-- do not use parent configuration -->
      <!-- GJP 2022-06-20 Do not know why this has been commented out. Activate it again. -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${maven-assembly-plugin.version}</version>
        <inherited>false</inherited>
        <configuration combine.self="override">                                     
          <descriptorRefs>
            <descriptorRef>src</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-info</id>
      <properties>
        <default.goal>${db.phase.process} flyway:info</default.goal>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
          </plugin>
          <plugin>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-install</id>
      <properties>
        <default.goal>${db.phase.process} flyway:repair flyway:migrate</default.goal>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>${maven-antrun-plugin.version}</version>
            <executions>
              <execution>
                <id>db-purge-flyway-table</id>
                <phase>${db.phase.process}</phase>
                <configuration>
                  <target unless="${db.install.skip}">
                    <fail message="Property db.userid must be set" unless="db.userid" />
                    <fail message="Property db.password must be set" unless="db.password" />
                    
                    <!-- GPA 2017-04-05 We must quote arguments with spaces on Windows. -->
                    <condition property="quote" value="&quot;" else="">
                      <os family="windows" />
                    </condition>

                    <!-- sql.home is already set -->
                    <condition property="my.sql.home" value="${sql.home}">
                      <available file="${sql.home}/bin/sql" type="file" />
                    </condition>
                    <condition property="my.sql.home" value="${env.SQL_HOME}">
                      <available file="${env.SQL_HOME}/bin/sql" type="file" />
                    </condition>
                    <condition property="sql.executable" value="${my.sql.home}/bin/sql.exe" else="${my.sql.home}/bin/sql">
                      <os family="windows"/>
                    </condition>

                    <!-- Passwords with a @ included pose problems when ${db.userid} is used to login. -->
                    <!-- Workaround: connect without password (${db.userid.without.password}) and supply password as inputstring. -->
                    <exec executable="${sql.executable}"
                          inputstring="${db.password}"
                          failonerror="true">                     
                      <arg value="-S" /> <!-- silent -->
                      <arg value="${quote}${db.userid.without.password}${quote}" />
                      <arg value="@${oracle-tools.db.src.dir}/scripts/purge_flyway_table.sql" />
                      <arg value="${flyway.table}" />
                      <arg value="${nr_months_to_keep.flyway.table}" />
                    </exec>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-upgrade</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <generate.flyway.migrations.sql>true</generate.flyway.migrations.sql>
        <exec.executable>echo</exec.executable>
        <!-- %classpath: see https://guntherrotsch.github.io/blog_2020/maven-classpath.html -->
        <exec.args>"%classpath"</exec.args>
        <exec.outputFile>${classpath.file}</exec.outputFile>
        <default.goal>exec:exec ${db.phase.process}</default.goal>
      </properties>
      <build>
        <plugins>
          <!--plugin>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-maven-plugin</artifactId>
          </plugin-->
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>${maven-antrun-plugin.version}</version>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-code-check</id>
      <properties>
        <default.goal>test</default.goal>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>db-install-init</id>
                <!-- Unbind from lifecycle for this POM -->
                <phase>none</phase>
              </execution>
              <execution>
                <id>db-install-verify</id>
                <!-- Unbind from lifecycle for this POM -->
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>db-code-check</id>
                <phase>test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>false</autocommit>
                  <sqlCommand>
                    select 'db.schema: ${db.schema}' as "=== Maven properties ==="
                    from dual
                    union all
                    select 'db.object.type: ${db.object.type}'
                    from dual
                    union all
                    select 'db.object.names: ${db.object.names}'
                    from dual
                    union all
                    select 'db.object.names.include: ${db.object.names.include}'
                    from dual
                    union all
                    select 'db.include.objects: ${db.include.objects}'
                    from dual
                    union all
                    select 'db.exclude.objects: ${db.exclude.objects}'
                    from dual
                    union all
                    select 'db.recompile: ${db.recompile}'
                    from dual
                    union all
                    select 'db.plsql.warnings: ${db.plsql.warnings}'
                    from dual
                    union all
                    select 'db.plscope.settings: ${db.plscope.settings}'
                    from dual;                    

                    select t.column_value as "=== Compiler messages ==="
                    from table
                         ( oracle_tools.cfg_install_pkg.format_compiler_messages
                           ( p_object_schema => '${db.schema}'
                           , p_object_type => '${db.object.type}'
                           , p_object_names => '${db.object.names}'
                           , p_object_names_include => '${db.object.names.include}'
                           , p_include_objects => '${db.include.objects}'
                           , p_exclude_objects => '${db.exclude.objects}'
                           , p_recompile => '${db.recompile}'
                           , p_plsql_warnings => '${db.plsql.warnings}'
                           , p_plscope_settings => '${db.plscope.settings}'
                           )
                         ) t;
                  </sqlCommand>
                  <printResultSet>true</printResultSet>
                  <outputDelimiter>|</outputDelimiter>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-test</id>
      <properties>
        <default.goal>test</default.goal>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>db-install-init</id>
                <!-- Unbind from lifecycle for this POM -->
                <phase>none</phase>
              </execution>
              <execution>
                <id>db-install-verify</id>
                <!-- Unbind from lifecycle for this POM -->
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.utplsql</groupId>
            <artifactId>utplsql-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-generate-ddl-full</id>
      <properties>
        <default.goal>${db.phase.process}</default.goal>       
        <!-- Pivotal #132752233 GPA 2016-10-19
             Is the FORCE keyword in scripts (CREATE OR REPLACE FORCE VIEW)
             generated by profile generate-ddl-full allowed? -->
        <db.full.force.view>no</db.full.force.view>
        <db.full.group.constraints>yes</db.full.group.constraints>
        <!-- skip install.sql / uninstall.sql scripts during a full generation? -->
        <db.full.skip.install.sql>yes</db.full.skip.install.sql>
        <!-- This property determines script creation ((R__)?<seq>.<schema>.<object_type>.<object_name>.sql) -->
        <!-- pkg_ddl_util v4: sequence number depends on object type -->
        <!-- pkg_ddl_util v5: sequence number depends on install_sequence.txt (initially created ordered on object dependencies) -->
        <db.full.interface>pkg_ddl_util v5</db.full.interface>
        <db.full.transform.params></db.full.transform.params>
        <db.generate.ddl.full.skip>${db.install.skip}</db.generate.ddl.full.skip>
        <!-- create or replace "source schema"."source name" 
             =>
             create or replace "source name" ? -->
        <db.generate.full.strip.source.schema>0</db.generate.full.strip.source.schema>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>${maven-antrun-plugin.version}</version>
            <executions>
              <execution>
                <id>db-generate-ddl-full</id>
                <!-- give the generate-resources phase a chance to extract resources -->
                <phase>${db.phase.process}</phase>
                <configuration>
                  <target unless="${db.generate.ddl.full.skip}">
                    <fail message="Property db.userid must be set" unless="db.userid" />
                    <fail message="Property db.password must be set" unless="db.password" />
                    <ant antfile="${oracle-tools.db.src.dir}/scripts/generate_ddl.xml"
                         target="generate-ddl-full"
                         inheritAll="false"
                         dir=".">
                      <property name="show.properties" value="${db.show.properties}" />
                      <property name="source.db.name" value="" />
                      <property name="schema" value="${db.schema}" />
                      <property name="userid" value="${db.userid}" />
                      <property name="object.type" value="${db.object.type}" />
                      <property name="object.names" value="${db.object.names}" />
                      <property name="object.names.include" value="${db.object.names.include}" />
                      <property name="exclude.objects" value="${db.exclude.objects}" />
                      <property name="include.objects" value="${db.include.objects}" />
                      <property name="full.force.view" value="${db.full.force.view}" />
                      <property name="full.group.constraints" value="${db.full.group.constraints}" />
                      <property name="full.output.directory" value="${db.src.full.scripts}" />
                      <property name="full.skip.install.sql" value="${db.full.skip.install.sql}" />
                      <property name="full.interface" value="${db.full.interface}" />
                      <property name="full.strip.source.schema" value="${db.generate.full.strip.source.schema}" />
                      <property name="full.transform.params" value="${db.full.transform.params}" />
                      <property name="owner" value="${oracle-tools.db.schema}" />
                      <property name="src.dir" value="${oracle-tools.db.src.dir}/scripts" />
                      <property name="build.dir" value="${project.build.directory}" />
                      <reference torefid="compile.classpath" refid="maven.compile.classpath"/>
                      <reference torefid="runtime.classpath" refid="maven.runtime.classpath"/>
                    </ant>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-generate-ddl-incr</id>
      <properties>
        <default.goal>${db.phase.process}</default.goal>       
        <!-- Use dynamic SQL for the incremental migration scripts? -->
        <db.incr.dynamic.sql>no</db.incr.dynamic.sql>
        <!-- skip repeatable/replaceable objects in incremental migration scripts? -->
        <db.incr.skip.repeatables>yes</db.incr.skip.repeatables>
        <!-- see above (db-generate-ddl-full) -->
        <db.incr.interface>pkg_ddl_util v5</db.incr.interface>
        <db.incr.transform.params></db.incr.transform.params>
        <db.generate.ddl.incr.skip>${db.install.skip}</db.generate.ddl.incr.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>${maven-antrun-plugin.version}</version>
            <executions>
              <execution>
                <id>db-generate-ddl-incr</id>
                <!-- give the generate-resources phase a chance to extract resources -->
                <phase>${db.phase.process}</phase>
                <configuration>
                  <target unless="${db.generate.ddl.incr.skip}">
                    <fail message="Property db.prev.database.link must be set" unless="db.prev.database.link" />
                    <fail message="Property db.password must be set" unless="db.password" />
                    <ant antfile="${oracle-tools.db.src.dir}/scripts/generate_ddl.xml"
                         target="generate-ddl-incr"
                         inheritAll="false"
                         dir=".">
                      <!-- GPA 2017-02-07 #137711209 We connect to the target
                           and use database links on the target connection to
                           the source. -->
                      <property name="show.properties" value="${db.show.properties}" />
                      <property name="userid" value="${db.userid}" />
                      <property name="source.db.name" value="${db.prev.database.link}" />
                      <property name="target.db.name" value="" />
                      <property name="schema" value="${db.schema}" />
                      <property name="object.type" value="${db.object.type}" />
                      <property name="object.names" value="${db.object.names}" />
                      <property name="object.names.include" value="${db.object.names.include}" />
                      <property name="exclude.objects" value="${db.exclude.objects}" />
                      <property name="include.objects" value="${db.include.objects}" />
                      <property name="incr.dynamic.sql" value="${db.incr.dynamic.sql}" />
                      <property name="incr.output.directory" value="${db.src.incr.scripts}" />
                      <property name="incr.skip.repeatables" value="${db.incr.skip.repeatables}" />
                      <property name="incr.interface" value="${db.incr.interface}" />
                      <property name="incr.transform.params" value="${db.incr.transform.params}" />
                      <property name="owner" value="${oracle-tools.db.schema}" />
                      <property name="src.dir" value="${oracle-tools.db.src.dir}/scripts" />
                      <property name="build.dir" value="${project.build.directory}" />
                      <reference torefid="compile.classpath" refid="maven.compile.classpath"/>
                      <reference torefid="runtime.classpath" refid="maven.runtime.classpath"/>
                    </ant>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile to be called by the user -->
    <profile>
      <id>db-inquiry</id>
      <properties>
        <default.goal>compile</default.goal>
        <conf.connect.skip>false</conf.connect.skip>
        <!-- do not read flyway properties -->
        <db.install.skip>false</db.install.skip>
        <db.show.properties>true</db.show.properties>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>db-install-verify</id>
                <!-- Unbind from lifecycle for this POM -->
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile activated when oracle-tools is not where it should be -->
    <profile>
      <id>db-dependency</id>
      <activation>
        <property>
          <name>db.dependency</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <!-- When child projects have this POM as parent and this project as
             dependency, this is the way to set oracle-tools.db.src.dir.
        -->
        <oracle-tools.db.version>${project.parent.version}</oracle-tools.db.version>
        <oracle-tools.db.src.dir>${project.build.directory}/dependency/db-${oracle-tools.db.version}/src</oracle-tools.db.src.dir>
      </properties>
      <dependencies>
        <dependency>
          <groupId>com.paulissoft.pato</groupId>
          <artifactId>db</artifactId>
          <classifier>src</classifier>
          <type>zip</type>
        </dependency>
      </dependencies>
      <build>
        <resources/>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <modules>
    <module>app</module>
  </modules>
  
</project>
