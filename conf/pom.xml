<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.paulissoft</groupId>
    <artifactId>pato</artifactId>
    <version>${revision}</version>
  </parent>
  <groupId>com.paulissoft.pato</groupId>
  <artifactId>conf</artifactId>
  <packaging>pom</packaging>
  <description>Core POM for Database configuration</description>
  
  <!--
      Normally these are the possible stages in a project:
      1) development
      2) integration
      3) test
      4) acceptance
      5) production
      
      Not all stages are necessary for a project: the project decides.
      
      The development stage has no previous database, i.e. it is not
      necessary to compare the current (development) database with a
      previous database to generate incremental DDL scripts (create/alter
      table/sequence ..., etcetera).  The subsequent stages do have a
      previous database: for production this is acceptance, for acceptance
      this is test, etcetera.

      The information about the current (and previous) database is stored in
      a file named env.properties which must be in a configuration folder
      (taking the pom.xml directory as reference) like (the first wins):
      a) conf
      b) ../conf
      c) ../../conf
      d) ../../../conf
      e) ${oracle-tools.conf.src.dir}
      
      The file env.properties must have a line like:
      db=<database directory name>
      
      The file env.properties may have a line like:
      db.prev=<database directory name>

      The database directory name is a directory below a configuration
      folder with a file named db.properties, just like env.properties

      The following properties can be set in db.properties:
      - username
      - userid
      - database.link
      - connect.identifier
      - url
      - proxy.username
      
      These are prefixed with db (or db.prev) using the criteria above.
      
      Please note that it is also possible to define properties via the
      command line.
  -->

  <properties>
    <oracle-tools.conf.src.dir>${oracle-tools.dir}/conf/src</oracle-tools.conf.src.dir>
    
    <!-- use initialize here so the Db/Apex pom can use validate -->
    <conf.phase.init>initialize</conf.phase.init>
    <!-- give the generate-resources phase a chance to extract resources -->
    <conf.phase.process>process-resources</conf.phase.process>
    <conf.test.connection>false</conf.test.connection>
    <conf.test.connection.timeout>600</conf.test.connection.timeout>
    <!-- 
         This property is used to construct the db.username property below in
         the conf-connect antrun execution.
         If a db.proxy.username is set, db.username will become
         ${db.proxy.username}[${db.schema}]. 
         If db.proxy.username is not set, db.username will be ${db.schema}.
    -->
    <db.schema.default>${project.artifactId}</db.schema.default>
    <!-- 
         Define db.password here as the environment variable DB_PASSWORD.
         So it can not be overridden in one of the property files since it
         already set. 
         Please note that the environment variable DB_PASSWORD is used in the
         PATO GUI so passwords need not be transferred on the command
         line, i.e. more security.
    -->
    <db.password>${env.DB_PASSWORD}</db.password>
    <!-- GJP 2021-09-06 For the time being display this only in debug mode-->
    <ant.log.level>info</ant.log.level>
    <conf.show.properties>false</conf.show.properties>
  </properties>

  <!-- Needed for Db Generate DDL scripts in child projects -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.paulissoft.pato</groupId>
        <artifactId>conf</artifactId>
        <version>${oracle-tools.db.version}</version>
        <classifier>src</classifier>
        <type>zip</type>
        <!-- Make sure this isn't included on any classpath-->
        <scope>provided</scope>
      </dependency>
      <!-- https://blogs.oracle.com/developers/post/your-own-way%E2%80%8A-%E2%80%8Aoracle-jdbc-drivers-19700-on-maven%C2%A0central -->
      <!-- https://www.oracle.com/database/technologies/maven-central-guide.html -->
      <dependency>
        <groupId>${ojdbc-bom.groupId}</groupId>
        <artifactId>${ojdbc-bom.artifactId}</artifactId>
        <version>${ojdbc-bom.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>${ojdbc.groupId}</groupId>
      <artifactId>${ojdbc.artifactId}</artifactId>
      <version>${ojdbc.version}</version>
      <type>pom</type>
    </dependency>
    <!-- Oracle wallets -->
    <dependency>
      <groupId>${osdt_core.groupId}</groupId>
      <artifactId>${osdt_core.artifactId}</artifactId>
      <version>${osdt_core.version}</version>
    </dependency>
    <dependency>
      <groupId>${osdt_cert.groupId}</groupId>
      <artifactId>${osdt_cert.artifactId}</artifactId>
      <version>${osdt_cert.version}</version>
    </dependency>
  </dependencies>

  <build>
    <resources />
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${maven-antrun-plugin.version}</version>
          <executions>
            <execution>
              <id>conf-init</id>
              <phase>${conf.phase.init}</phase>
              <configuration>
                <exportAntProperties>true</exportAntProperties>
                <target>
                  <condition property="conf.connect.skip" value="true" else="false">
                    <not>
                      <available file="src" type="dir" />
                    </not>
                  </condition>
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <id>conf-debug-before</id>
              <phase>${conf.phase.init}</phase>
              <configuration>
                <exportAntProperties>true</exportAntProperties>
                <target if="${conf.show.properties}">
                  <echoproperties prefix="java." />
                  <echoproperties prefix="maven." />
                  <echoproperties prefix="db." />
                  <!-- also dbUrl, dbUser -->
                  <echoproperties regex="(dbUrl|dbUser)" />
                  <echoproperties prefix="oracle-tools." />
                  <echoproperties prefix="oracle." />
                  <echoproperties prefix="oracle_" />
                  <echoproperties prefix="conf." />                 
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <!-- This must be named -->
              <id>conf-connect</id>
              <!-- give the generate-resources phase a chance to extract resources -->
              <phase>${conf.phase.init}</phase>
              <configuration>
                <exportAntProperties>true</exportAntProperties>
                <target unless="${conf.connect.skip}">
                  <!-- GPA 2017-03-09 #141396395
                       As a CD developer I want to maintain the connection
                       data in just one configuration folder.

                       This configuration folder will be db.config.dir which
                       will be (in that order):

                       - conf
                       - ../conf
                       - ../../conf
                       - ../../../conf
                       - ${oracle-tools.conf.src.dir}
                       to look for DB related properties files.
                       
                       This reduces the need for duplicate folders/files.
                  -->

                  <property name="db.config.dir.env.properties" value="${db.config.dir}${file.separator}env.properties" />
                  
                  <fail message="The database conf directory '${db.config.dir}' does not contain a file 'env.properties'">
                    <condition>
                      <and>
                        <isset property="db.config.dir"/>
                        <not>
                          <available file="${db.config.dir.env.properties}" type="file"/>
                        </not>
                      </and>
                    </condition>
                  </fail>

                  <!-- SET db.config.dir -->
                  <property name="tmp.env.properties1"
                            value="conf${file.separator}env.properties" />
                  <property name="tmp.env.properties2"
                            value="..${file.separator}${tmp.env.properties1}" />
                  <property name="tmp.env.properties3"
                            value="..${file.separator}${tmp.env.properties2}" />
                  <property name="tmp.env.properties4"
                            value="..${file.separator}${tmp.env.properties3}" />
                  <property name="tmp.env.properties5"
                            value="${oracle-tools.conf.src.dir}${file.separator}env.properties" />

                  <condition property="env.properties" value="${db.config.dir.env.properties}">
                    <available file="${db.config.dir.env.properties}" type="file" />
                  </condition>
                  <condition property="env.properties" value="${tmp.env.properties1}">
                    <available file="${tmp.env.properties1}" type="file" />
                  </condition>
                  <condition property="env.properties" value="${tmp.env.properties2}">
                    <available file="${tmp.env.properties2}" type="file" />
                  </condition>
                  <condition property="env.properties" value="${tmp.env.properties3}">
                    <available file="${tmp.env.properties3}" type="file" />
                  </condition>
                  <condition property="env.properties" value="${tmp.env.properties4}">
                    <available file="${tmp.env.properties4}" type="file" />
                  </condition>
                  <condition property="env.properties" value="${tmp.env.properties5}">
                    <available file="${tmp.env.properties5}" type="file" />
                  </condition>

                  <dirname file="${env.properties}" property="db.config.dir" />

                  <property name="env.properties.abs" location="${env.properties}" />

                  <!-- READ THE env.properties FILE (from the db dir preferably when db is set). -->
                  <condition property="db.env.properties" value="${db.config.dir}/${db}/env.properties" else="${env.properties}">
                    <and>
                      <isset property="db" />
                      <available file="${db.config.dir}/${db}/env.properties" type="file" />
                    </and>
                  </condition>

                  <property name="db.env.properties.abs" location="${db.env.properties}" />
                  
                  <!--
                      1) read the file env.properties (file may not exist)
                      2) the file may set db and maybe db.prev (for backwards compatibility we also check db.source and db.target)
                  -->
                  
                  <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                    <available file="${db.env.properties.abs}" type="file" />
                    <then>
                      <echo level="${ant.log.level}" message="Reading environment properties from file ${db.env.properties.abs}" />
                      <property file="${db.env.properties.abs}" />
                    </then>
                    <else>
                      <echo level="${ant.log.level}" message="Could NOT read environment properties since file env.properties has NOT been found" />
                    </else>
                  </ac:if>

                  <!-- determine DB -->
                  
                  <!-- backwards compatibility -->
                  <!-- db.target first because that is the installation database -->
                  <condition property="db" value="${db.target}">
                    <isset property="db.target" />
                  </condition>
                  
                  <!-- db.source next -->
                  <condition property="db" value="${db.source}">
                    <isset property="db.source" />
                  </condition>

                  <!-- READ THE db.properties FILE. -->
                  
                  <!-- DB -->
                  <!-- First find the properties file -->
                  <condition property="db.properties" value="${db.config.dir}${file.separator}${db}${file.separator}db.properties">
                    <available file="${db.config.dir}${file.separator}${db}${file.separator}db.properties" type="file" />
                  </condition>
                  <property name="db.properties.abs" location="${db.properties}" />

                  <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                    <available file="${db.properties.abs}" type="file" />
                    <then>
                      <echo level="${ant.log.level}" message="Reading db properties from file ${db.properties.abs}" />
                      <!-- prefixValues="true" is needed for correctly expanding
                           username=prxy[${schema}] -->
                      <property file="${db.properties.abs}" prefix="db" prefixValues="true" />
                    </then>
                    <else>
                      <echo level="${ant.log.level}" message="Could NOT read db properties since file db.properties has NOT been found" />
                    </else>
                  </ac:if>
                  
                  <!-- new eazy connect syntax -->
                  <!-- db info -->

                  <property name="db.connect.identifier" value="//${db.host}:${db.port}/${db.service}" />                  

                  <property name="db.url" value="jdbc:oracle:thin:@${db.connect.identifier}" />

                  <echo level="${ant.log.level}" message="Executing test for connection to database ${db}" />

                  <!-- GJP 2022-09-02 -->
                  <!-- The Jenkins handling of (proxy) username should be more user friendly. -->
                  <!-- https://github.com/paulissoft/oracle-tools/issues/50 -->
                  <!-- test if ${env.DB_USERNAME} equals to ${db.proxy.username} or ${db.username} -->
                  <condition property="tmp.username" value="${db.proxy.username}" else="${db.username}">
                    <isset property="db.proxy.username"/>
                  </condition>
                  <fail message="Environment variabe DB_USERNAME (${env.DB_USERNAME}) is not equal to (${tmp.username}).">
                    <condition>
                      <and>
                        <isset property="env.DB_USERNAME"/>
                        <or>
                          <isset property="db.proxy.username"/>
                          <isset property="db.username"/>
                        </or>
                        <not>
                          <isset property="db.userid"/>
                        </not>
                        <not>
                          <equals arg1="${env.DB_USERNAME}" arg2="${tmp.username}" casesensitive="true"/>
                        </not>
                      </and>
                    </condition>
                  </fail>

                  <property name="db.schema" value="${db.schema.default}" />

                  <!-- use proxy users if property db.proxy.username exists -->
                  <condition property="db.username"
                             value="${db.proxy.username}[${db.schema}]"
                             else="${db.schema}">
                    <isset property="db.proxy.username"/>
                  </condition>
                  <property name="db.userid" value="${db.username}/${db.password}@${db.connect.identifier}" />
                  <property name="db.userid.without.password" value="${db.username}@${db.connect.identifier}" />

                  <!-- set utplsql properties -->
                  <property name="dbUrl" value="${db.url}" />
                  <property name="dbUser" value="${db.username}" />
                  <property name="dbPass" value="${db.password}" />

                  <!-- set code check properties -->
                  <property name="db.recompile" value="1" /> <!-- 0 or 1 -->
                  <property name="db.plsql.warnings" value="ENABLE:ALL" /> <!-- alter session set PLSQL_WARNINGS = ... -->
                  <property name="db.plscope.settings" value="IDENTIFIERS:ALL" /> <!-- alter session set PLSCOPE_SETTINGS = ... -->

                  <!-- READ THE db.prev.properties FILE. -->
                  
                  <!-- DB.PREV -->
                  <!-- First find the properties file -->
                  <condition property="db.prev.properties" value="${db.config.dir}${file.separator}${db.prev}${file.separator}db.properties">
                    <available file="${db.config.dir}${file.separator}${db.prev}${file.separator}db.properties" type="file" />
                  </condition>
                  <property name="db.prev.properties.abs" location="${db.prev.properties}" />
                  <!-- target info -->
                  <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                    <available file="${db.prev.properties.abs}" type="file" />
                    <then>
                      <echo level="${ant.log.level}" message="Reading db.prev properties from file ${db.prev.properties.abs}" />
                      <property file="${db.prev.properties.abs}" prefix="db.prev" />
                    </then>
                    <else>
                      <echo level="${ant.log.level}"
                            message="Could NOT read db.prev properties since property db.prev is NOT set or file db.properties has NOT been found" />
                    </else>
                  </ac:if>

                  <!-- db.prev.database.link is empty meaning the previous database schema is used -->
                  <property name="db.prev.database.link"
                            value="${db.schema}@${db.prev.service}" />

                  <!-- Test the connection for a database (only once) -->

                  <tstamp /> <!-- sets ${TODAY} -->
                  <!-- The exec below will create directory ${oracle-tools.dir}/conf/app/target/ -->
                  <property name="conf.test.connection.property.file"
                            location="${oracle-tools.dir}/conf/app/target/conf.test.connection.properties" />
                  <property file="${conf.test.connection.property.file}" />

                  <!-- Ant Contrib new style -->
                  <ac:propertycopy xmlns:ac="antlib:net.sf.antcontrib"
                                   property="conf.test.connection.ok"
                                   override="true"
                                   from="conf.test.connection.ok.${db}.${TODAY}"
                                   silent="true" />

                  <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                    <equals arg1="${conf.test.connection.ok}" arg2="true" />
                    <then>
                      <echo level="${ant.log.level}" message="Skipping test for connection to database ${db} since it has already been tested today" />
                    </then>
                    <elseif>
                      <equals arg1="${conf.test.connection}" arg2="false" />
                      <then>
                        <echo level="${ant.log.level}" message="Skipping test for connection to database ${db} since property conf.test.connection is false" />
                      </then>
                    </elseif>
                    <elseif>
                      <contains string="${db.url}" substring="${" />
                      <then>
                        <echo level="${ant.log.level}" message="Skipping test for connection to database ${db} since property db.url contains '${'" />
                      </then>
                    </elseif>
                    <elseif>
                      <contains string="${db.username}" substring="${" />
                      <then>
                        <echo level="${ant.log.level}" message="Skipping test for connection to database ${db} since property db.username contains '${'" />
                      </then>
                    </elseif>
                    <else>
                      <echo level="${ant.log.level}" message="Executing test for connection to database ${db}" />
                      <exec executable="perl"
                            spawn="false"
                            failonerror="false"
                            outputproperty="test.connection.output"
                            errorproperty="test.connection.error"
                            resultproperty="test.connection.result"
                            failifexecutionfails="false">
                        <arg value="${oracle-tools.dir}/src/scripts/timeout.pl"/>
                        <arg value="--timeout"/>
                        <arg value="${conf.test.connection.timeout}"/>
                        <arg value="mvn"/>
                        <arg value="-q"/>
                        <arg value="-f"/>
                        <arg value="${oracle-tools.dir}/conf/app/pom.xml"/>
                        <arg value="-Ptest-connection"/>
                        <arg value="-Ddb.url=${db.url}"/>                       
                        <env key="DB_USERNAME" value="${db.username}"/>
                        <env key="DB_PASSWORD" value="${db.password}"/>
                        <env key="LC_CTYPE" value="en_US.UTF-8"/>
                        <env key="LC_ALL" value="en_US.UTF-8"/>
                        <env key="LANG" value="C.UTF-8"/>
                      </exec>
                      <fail message="${test.connection.error}">
                        <condition>
                          <and>
                            <isset property="test.connection.result"/>
                            <not>
                              <equals arg1="${test.connection.result}" arg2="0"/>
                            </not>
                          </and>
                        </condition>
                      </fail>
                      <!-- Store the fact that the test for a database connection has been successful for this database. -->
                      <propertyfile file="${conf.test.connection.property.file}">
                        <entry key="conf.test.connection.ok.${db}.${TODAY}" value="true"/>
                      </propertyfile>                     
                    </else>
                  </ac:if>
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>

            <execution>
              <id>conf-debug-after</id>
              <phase>${conf.phase.process}</phase>
              <configuration>
                <target if="${conf.show.properties}">
                  <echoproperties prefix="env." />
                  <echoproperties prefix="db." />
                  <!-- also dbUrl, dbUser -->
                  <echoproperties regex="(dbUrl|dbUser)" />
                  <echoproperties prefix="oracle." />
                  <echoproperties prefix="oracle_" />
                </target>
              </configuration>
              <goals>
                <goal>run</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>set-system-properties</goal>
            </goals>
            <configuration>
              <properties>
                <property>
                  <!-- SEVERE: attempt to configure ONS in FanManager failed with oracle.ons.NoServersAvailable: Subscription time out -->
                  <name>oracle.jdbc.fanEnabled</name>
                  <value>false</value>
                </property>
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${maven-assembly-plugin.version}</version>
        <!-- Configuration won't be propagated to children -->
        <inherited>false</inherited>
        <!-- do not use parent configuration -->
        <configuration combine.self="override">                                     
          <descriptorRefs>
            <descriptorRef>src</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
  <profiles>
    <!-- profile to be called by the user -->
    <profile>
      <id>conf-inquiry</id>
      <properties>
        <default.goal>compile</default.goal>
        <conf.connect.skip>false</conf.connect.skip>
        <conf.test.connection>false</conf.test.connection>
        <db.install.skip>true</db.install.skip>
        <apex.skip>true</apex.skip>
        <conf.show.properties>true</conf.show.properties>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- profile activated when oracle-tools is not where it should be -->
    <profile>
      <id>conf-dependency</id>
      <activation>
        <property>
          <name>conf.dependency</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <!-- When child projects have this POM as parent and this project as
             dependency, this is the way to set oracle-tools.conf.src.dir.
        -->
        <conf.test.connection>false</conf.test.connection>
        <oracle-tools.conf.version>${project.parent.version}</oracle-tools.conf.version>
        <oracle-tools.conf.src.dir>${project.build.directory}/dependency/conf-${oracle-tools.conf.version}/src</oracle-tools.conf.src.dir>
      </properties>
      <dependencies>
        <dependency>
          <groupId>com.paulissoft.pato</groupId>
          <artifactId>conf</artifactId>
          <classifier>src</classifier>
          <type>zip</type>
        </dependency>
      </dependencies>
      <build>
        <resources/>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  
  <modules>
    <module>app</module>
  </modules>

</project>
